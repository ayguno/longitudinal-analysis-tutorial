runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/MediumScaleApp')
final_significance <- NULL
significance <- NULL
Cells <- as.character(unique(ClV$Cell))
for(i in seq_along(Cells)){
treatments <- as.character(unique(ClV$Experiment[ClV$Cell == Cells[i]]))
for(j in seq_along(treatments)){
significance$Cells[j] <- Cells[i]
significance$treatments[j] <- treatments[j]
w <- which(grepl(treatments[j],names(target_adjp)) &
grepl(Cells[i],names(target_adjp)) )
temp_adjp <- target_adjp[,w]
temp_adjp <- temp_adjp[complete.cases(temp_adjp)]
significance$number_of_significant[j] <- length(which(temp_adjp < 0.05))
}
final_significance <- rbind(final_significance,significance)
}
final_significance <- NULL
significance <- NULL
Cells <- as.character(unique(ClV$Cell))
i =1
seq_along(Cells)
treatments <- as.character(unique(ClV$Experiment[ClV$Cell == Cells[i]]))
treatments
j =1
significance$Cells[j] <- Cells[i]
significance$treatments[j] <- treatments[j]
w <- which(grepl(treatments[j],names(target_adjp)) &
grepl(Cells[i],names(target_adjp)) )
temp_adjp <- target_adjp[,w]
View(temp_adjp)
temp_adjp <- temp_adjp[complete.cases(temp_adjp)]
View(temp_adjp)
temp_adjp <- temp_adjp[complete.cases(temp_adjp),]
final_significance <- NULL
significance <- data_frame(treatments = 1, Cells =  1, number_of_significant =  1)
Cells <- as.character(unique(ClV$Cell))
for(i in seq_along(Cells)){
treatments <- as.character(unique(ClV$Experiment[ClV$Cell == Cells[i]]))
for(j in seq_along(treatments)){
significance$Cells[j] <- Cells[i]
significance$treatments[j] <- treatments[j]
w <- which(grepl(treatments[j],names(target_adjp)) &
grepl(Cells[i],names(target_adjp)) )
temp_adjp <- target_adjp[,w]
temp_adjp <- temp_adjp[complete.cases(temp_adjp),]
significance$number_of_significant[j] <- length(which(temp_adjp < 0.05))
}
final_significance <- rbind(final_significance,significance)
}
n.treatments <- 1 : length(levels(ClV$Experiment))
final_significance <- NULL
n.treatments <- 1 : length(levels(ClV$Experiment))
significance <- data_frame(treatments = n.treatments,
Cells = n.treatments,
number_of_significant =  n.treatments)
Cells <- as.character(unique(ClV$Cell))
for(i in seq_along(Cells)){
treatments <- as.character(unique(ClV$Experiment[ClV$Cell == Cells[i]]))
for(j in seq_along(treatments)){
significance$Cells[j] <- Cells[i]
significance$treatments[j] <- treatments[j]
w <- which(grepl(treatments[j],names(target_adjp)) &
grepl(Cells[i],names(target_adjp)) )
temp_adjp <- target_adjp[,w]
temp_adjp <- temp_adjp[complete.cases(temp_adjp),]
significance$number_of_significant[j] <- length(which(temp_adjp < 0.05))
}
final_significance <- rbind(final_significance,significance)
}
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/MediumScaleApp')
final_significance <- NULL
n.treatments <- 1 : length(levels(ClV$Experiment))
significance <- data_frame(treatments = n.treatments,
Cells = n.treatments,
number_of_significant =  n.treatments)
View(significance)
Cells <- as.character(unique(ClV$Cell))
i =1
j =1
treatments <- as.character(unique(ClV$Experiment[ClV$Cell == Cells[i]]))
significance$Cells[j] <- Cells[i]
significance$treatments[j] <- treatments[j]
w <- which(grepl(treatments[j],names(target_adjp)) &
grepl(Cells[i],names(target_adjp)) )
View(significance)
temp_adjp <- target_adjp[,w]
View(temp_adjp)
View(target_adjp)
View(temp_adjp)
View(target_frame)
View(temp_adjp)
treatments
indices <- as.character(unique(ClV$Index))
View(temp_adjp)
names(temp_adjp)
k =1
w <- which(names(target_adjp) == paste0("adj.P.Val.",treatments[j],"_",indices[k]))
paste0("adj.P.Val.",treatments[j],"_",indices[k]
)
w <- which(names(target_adjp) == paste0("adj.P.Val.",treatments[j],"_",Cells[i],"_",indices[k]))
final_significance <- NULL
n.treatments <- 1 : length(levels(ClV$Experiment))
significance <- data_frame(treatments = n.treatments,
Cells = n.treatments,
number_of_significant =  n.treatments)
Cells <- as.character(unique(ClV$Cell))
indices <- as.character(unique(ClV$Index))
for(k in seq_along(indices)){
for(i in seq_along(Cells)){
treatments <- as.character(unique(ClV$Experiment[ClV$Cell == Cells[i]]))
for(j in seq_along(treatments)){
significance$Cells[j] <- Cells[i]
significance$treatments[j] <- treatments[j]
# w <- which(grepl(treatments[j],names(target_adjp)) &
#                    grepl(Cells[i],names(target_adjp)) )
w <- which(names(target_adjp) == paste0("adj.P.Val.",treatments[j],"_",Cells[i],"_",indices[k]))
temp_adjp <- target_adjp[,w]
temp_adjp <- temp_adjp[complete.cases(temp_adjp)]
significance$number_of_significant[j] <- length(which(temp_adjp < 0.05))
}
final_significance <- rbind(final_significance,significance)
}
}
final_significance <- NULL
n.treatments <- 1 : length(levels(ClV$Experiment))
significance <- data_frame(treatments = n.treatments,
Cells = n.treatments,
number_of_significant =  n.treatments)
Cells <- as.character(unique(ClV$Cell))
indices <- as.character(unique(ClV$Index))
i =1
k =1
j =1
treatments <- as.character(unique(ClV$Experiment[ClV$Cell == Cells[i]]))
significance$Cells[j] <- Cells[i]
significance$treatments[j] <- treatments[j]
# w <- which(grepl(treatments[j],names(target_adjp)) &
#                    grepl(Cells[i],names(target_adjp)) )
w <- which(names(target_adjp) == paste0("adj.P.Val.",treatments[j],"_",Cells[i],"_",indices[k]))
temp_adjp <- target_adjp[,w]
temp_adjp <- temp_adjp[complete.cases(temp_adjp)]
significance$number_of_significant[j] <- length(which(temp_adjp < 0.05))
final_significance <- rbind(final_significance,significance)
View(final_significance)
k =2
final_significance <- NULL
final_significance_temp <- NULL
n.treatments <- 1 : length(levels(ClV$Experiment))
significance <- data_frame(treatments = n.treatments,
Cells = n.treatments,
number_of_significant =  n.treatments)
Cells <- as.character(unique(ClV$Cell))
indices <- as.character(unique(ClV$Index))
for(k in seq_along(indices)){
for(i in seq_along(Cells)){
treatments <- as.character(unique(ClV$Experiment[ClV$Cell == Cells[i]]))
for(j in seq_along(treatments)){
significance$Cells[j] <- Cells[i]
significance$treatments[j] <- treatments[j]
# w <- which(grepl(treatments[j],names(target_adjp)) &
#                    grepl(Cells[i],names(target_adjp)) )
w <- which(names(target_adjp) == paste0("adj.P.Val.",treatments[j],"_",Cells[i],"_",indices[k]))
temp_adjp <- target_adjp[,w]
temp_adjp <- temp_adjp[complete.cases(temp_adjp)]
significance$number_of_significant[j] <- length(which(temp_adjp < 0.05))
}
final_significance_temp <- rbind(final_significance_temp,significance)
}
final_significance <- rbind( final_significance,final_significance_temp)
}
View(significance)
final_significance <- NULL
final_significance_temp <- NULL
n.treatments <- 1 #: length(levels(ClV$Experiment))
significance <- data_frame(treatments = n.treatments,
Cells = n.treatments,
number_of_significant =  n.treatments)
Cells <- as.character(unique(ClV$Cell))
indices <- as.character(unique(ClV$Index))
for(k in seq_along(indices)){
for(i in seq_along(Cells)){
treatments <- as.character(unique(ClV$Experiment[ClV$Cell == Cells[i]]))
for(j in seq_along(treatments)){
significance$Cells[j] <- Cells[i]
significance$treatments[j] <- treatments[j]
# w <- which(grepl(treatments[j],names(target_adjp)) &
#                    grepl(Cells[i],names(target_adjp)) )
w <- which(names(target_adjp) == paste0("adj.P.Val.",treatments[j],"_",Cells[i],"_",indices[k]))
temp_adjp <- target_adjp[,w]
temp_adjp <- temp_adjp[complete.cases(temp_adjp)]
significance$number_of_significant[j] <- length(which(temp_adjp < 0.05))
}
final_significance_temp <- rbind(final_significance_temp,significance)
}
final_significance <- rbind( final_significance,final_significance_temp)
}
final_significance <- NULL
final_significance_temp <- NULL
n.treatments <- 1 : length(levels(ClV$Experiment))
significance <- data_frame(treatments = n.treatments,
Cells = n.treatments,
number_of_significant =  n.treatments)
Cells <- as.character(unique(ClV$Cell))
indices <- as.character(unique(ClV$Index))
for(k in seq_along(indices)){
for(i in seq_along(Cells)){
treatments <- as.character(unique(ClV$Experiment[ClV$Cell == Cells[i]]))
for(j in seq_along(treatments)){
significance$Cells[j] <- Cells[i]
significance$treatments[j] <- treatments[j]
# w <- which(grepl(treatments[j],names(target_adjp)) &
#                    grepl(Cells[i],names(target_adjp)) )
w <- which(names(target_adjp) == paste0("adj.P.Val.",treatments[j],"_",Cells[i],"_",indices[k]))
temp_adjp <- target_adjp[,w]
temp_adjp <- temp_adjp[complete.cases(temp_adjp)]
significance$number_of_significant[j] <- length(which(temp_adjp < 0.05))
}
final_significance_temp <- rbind(final_significance_temp,significance)
}
final_significance <- rbind( final_significance,final_significance_temp)
}
library(limma)
d <- read.csv2("W:/Ozan/Poly_Ub_project/E15/E15_fractions_process_report/proteinProteinCentricColumnsExport.1_UP2_FQ_RC2_-ratio-normMedian.txt",
na.strings = c("NA"," "))
View(d)
d <- read.table("W:/Ozan/Poly_Ub_project/E15/E15_fractions_process_report/proteinProteinCentricColumnsExport.1_UP2_FQ_RC2_-ratio-normMedian.txt",
na.strings = c("NA"," "))
d <- read.delim("W:/Ozan/Poly_Ub_project/E15/E15_fractions_process_report/proteinProteinCentricColumnsExport.1_UP2_FQ_RC2_-ratio-normMedian.txt",
na.strings = c("NA"," "))
View(d)
names(d)
row.names(data) <- d$accession_number
View(data)
data.mat <- d[1:18] #Get the log ratios as a matrix
row.names(data.mat) <- d$accession_number
View(data.mat)
apply(data.mat,2,median)
fit <- lmFit(data.mat)
fit <- eBayes(fit)
significance <- topTable(fit, number = nrow(data.mat))
View(significance)
fit$coefficients
head(fit$coefficients)
data.mat <- d[,grepl("128C.126..Tetra_Ub_K48_iDUB.Control|130C.131..Tetra_Ub_K48_iDUB.Control",names(d))]
View(data.mat)
row.names(data.mat) <- d$accession_number # We stick the gene names into the expression set as row.names
apply(data.mat,2,median) # It is median normalized
# Using lmFit to fit the linear model for each gene ID
fit <- lmFit(data.mat)
# Perform emprical Bayes optimization
fit <- eBayes(fit)
# Extract the table of gene sets, set number = nrow(data.mat) to get all of them
significance <- topTable(fit, number = nrow(data.mat))
head(significance)
row.names(data.mat) <- d$accession_number # We stick the gene names into the expression set as row.names
apply(data.mat,2,median) # It is median normalized
# Using lmFit to fit the linear model for each gene ID
fit <- lmFit(data.mat)
# Perform emprical Bayes optimization
fit <- eBayes(fit)
# Extract the table of gene sets, set number = nrow(data.mat) to get all of them
significance <- topTable(fit, number = nrow(data.mat), sort.by = "none")
head(significance)
View(data.mat)
(0.238 -0.120)/2
row.names(data.mat) <- d$accession_number # We stick the gene names into the expression set as row.names
apply(data.mat,2,median) # It is median normalized
# Using lmFit to fit the linear model for each gene ID
fit <- lmFit(data.mat)
# Perform emprical Bayes optimization
# robust = TRUE makes model robust against outlier sample variances
fit <- eBayes(fit, robust = TRUE)
# Extract the table of gene sets, set number = nrow(data.mat) to get all of them
significance <- topTable(fit, number = nrow(data.mat), sort.by = "none")
head(significance)
row.names(data.mat) <- d$accession_number # We stick the gene names into the expression set as row.names
apply(data.mat,2,median) # It is median normalized
# Using lmFit to fit the linear model for each gene ID
fit <- lmFit(data.mat)
fit <- eBayes(fit, robust = TRUE)
install.packages("statmod")
fit <- eBayes(fit, robust = TRUE)
significance <- topTable(fit, number = nrow(data.mat), sort.by = "none")
head(significance)
fit$coefficients
head(significance)
head(fit$coefficients)
d <- read.delim("W:/Ozan/Poly_Ub_project/E15/E15_fractions_process_report/proteinProteinCentricColumnsExport.1_UP2_FQ_RC2_-ratio-normMedian.txt",
na.strings = c("NA"," "))
data.mat <- d[1:18] #Get the log ratios as a matrix
row.names(data.mat) <- d$accession_number # We stick the gene names into the expression set as row.names
apply(data.mat,2,median) # It is median normalized
View(data.mat)
data.mat <- d[,grepl("128C.126..Tetra_Ub_K48_iDUB.Control|130C.131..Tetra_Ub_K48_iDUB.Control",names(d))]
row.names(data.mat) <- d$accession_number # We stick the gene names into the expression set as row.names
apply(data.mat,2,median) # It is median normalized
fit <- lmFit(data.mat)
library(limma)
fit <- lmFit(data.mat)
# Perform emprical Bayes optimization
# robust = TRUE makes model robust against outlier sample variances
fit <- eBayes(fit, robust = TRUE)
library(limma)
d <- read.delim("W:/Ozan/Poly_Ub_project/E15/E15_fractions_process_report/proteinProteinCentricColumnsExport.1_UP2_FQ_RC2_-ratio-normMedian.txt",
na.strings = c("NA"," "))
data.mat <- d[1:18] #Get the log ratios as a matrix
row.names(data.mat) <- d$accession_number # We stick the gene names into the expression set as row.names
apply(data.mat,2,median) # It is median normalized
# Using lmFit to fit the linear model for each gene ID
fit <- lmFit(data.mat)
# Perform emprical Bayes optimization
fit <- eBayes(fit)
# Extract the table of gene sets, set number = nrow(data.mat) to get all of them
significance <- topTable(fit, number = nrow(data.mat))
head(significance)
d <- read.delim("W:/Ozan/Poly_Ub_project/E15/E15_fractions_process_report/proteinProteinCentricColumnsExport.1_UP2_FQ_RC2_-ratio-normMedian.txt",
na.strings = c("NA"," "))
data.mat <- d[1:18] #Get the log ratios as a matrix
row.names(data.mat) <- d$accession_number # We stick the gene names into the expression set as row.names
apply(data.mat,2,median) # It is median normalized
# Using lmFit to fit the linear model for each gene ID
fit <- lmFit(data.mat)
# Perform emprical Bayes optimization
fit <- eBayes(fit)
# Extract the table of gene sets, set number = nrow(data.mat) to get all of them
significance <- topTable(fit, number = nrow(data.mat), sort.by = "none")
head(significance)
data.mat <- d[,grepl("128C.126..Tetra_Ub_K48_iDUB.Control|130C.131..Tetra_Ub_K48_iDUB.Control",names(d))]
row.names(data.mat) <- d$accession_number # We stick the gene names into the expression set as row.names
apply(data.mat,2,median) # It is median normalized
# Using lmFit to fit the linear model for each gene ID
fit <- lmFit(data.mat)
# Perform emprical Bayes optimization
# robust = TRUE makes model robust against outlier sample variances
fit <- eBayes(fit, robust = TRUE)
significance <- topTable(fit, number = nrow(data.mat), sort.by = "none")
head(significance)
head(fit$coefficients)
significance$adj.P.Val.FDR <- p.adjust(significance$P.Value, method = "fdr")
View(significance)
plot(significance$adj.P.Val,significance$adj.P.Val.FDR, pch = 19, alpha = 0.2)
plot(significance$adj.P.Val,significance$adj.P.Val.FDR, pch = 19, alpha = I(0.2))
plot(significance$adj.P.Val,significance$adj.P.Val.FDR, pch = 19)
identical(significance$adj.P.Val,significance$adj.P.Val.FDR)
data.mat <- d[,grepl("FS20160721_OA_E15_polUB_Fractions..127C.126..Mono_Ub_iDUB.Control|FS20160721_OA_E15_polUB_Fractions..129C.131..Mono_Ub_iDUB.Control|128C.126..Tetra_Ub_K48_iDUB.Control|130C.131..Tetra_Ub_K48_iDUB.Control",names(d))]
row.names(data.mat) <- d$accession_number # We stick the gene names into the expression set as row.names
View(data.mat)
names(data.mat)
design.matrix <- model.matrix(~ Group)
Group <- factor(c("Mono","K48","Mono","K48"), levels = c("Mono","K48"))
design.matrix <- model.matrix(~ Group)
View(design.matrix)
design.matrix
row.names(design.matrix) <- colnames(data.mat)
design.matrix
fit.two.group <- lmFit(data.mat,design = design.matrix)
fit.two.group <- eBayes(fit.two.group)
fit.two.group <- lmFit(data.mat,design = design.matrix)
# Perform eBayes optimization;
fit.two.group <- eBayes(fit.two.group, robust = TRUE)
fit.two.group$coefficients
head(fit.two.group$coefficients)
two.group.significance <- topTable(fit.two.group, coef = "GroupK48", adjust.method = "fdr",
number = nrow(data.mat))
View(two.group.significance)
head(two.group.significance)
head(fit.two.group$coefficients)
fit.two.group <- lmFit(data.mat,design = design.matrix)
# Perform eBayes optimization;
fit.two.group <- eBayes(fit.two.group, robust = TRUE)
# Obtain the results:
two.group.significance <- topTable(fit.two.group, coef = "GroupK48", adjust.method = "fdr",
number = nrow(data.mat), sort.by = "none")
head(two.group.significance)
head(fit.two.group$coefficients)
head(apply(data.mat,1,mean))
head(apply(data.mat[,c(1,3)],1,mean))
head(apply(data.mat[,c(2,4)],1,mean))
head(apply(data.mat[,c(2,4)],1,mean)) - head(apply(data.mat[,c(1,3)],1,mean))
head(two.group.significance)
head(fit.two.group$coefficients)
head(apply(data.mat,1,mean))
Mono_mean <- head(apply(data.mat[,c(1,3)],1,mean))
K48_mean <- head(apply(data.mat[,c(2,4)],1,mean))
K48_mean - Mono_mean
Mono_mean
Mono_mean
design.matrix
two.group.significance[two.group.significance$adj.P.Val <0.05,]
hist(two.group.significance$P.Value)
two.group.significance[two.group.significance$adj.P.Val <0.1,]
shiny::runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/MediumScaleApp')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/MediumScaleApp')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/MediumScaleApp')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/MediumScaleApp')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/MediumScaleApp')
install.packages("timecourse")
biocLite("timecourse")
biocLite()
library(BiocInstaller)
biocLite("timecourse")
library(timecourse)
shiny::runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
library(timecourse)
head(data(fruitfly))
library(timecourse)
head(fruitfly)
library(timecourse)
head(fruitfly)
library(timecourse)
data("fruitfly")
head(fruitfly)
install.packages("ymal")
ymal
install.packages("yaml")
install.packages("yaml")
colnames(fruitfly)
apply(fruitfly,2,median)
hist(fruitfly[1])
hist(fruitfly[,1])
library(ggplot2)
plot(fruitfly[,1], type = "d")
plot(fruitfly[,1], type = "l")
plot(density(fruitfly[,1]), type = "l")
plot(density(fruitfly[,1]), type = "l", col = "navy")
curve(density(fruitfly[,2]))
plot(density(fruitfly[,1]), type = "l", col = "navy")
line(density(fruitfly[,2]))
plot(density(fruitfly[,1]), type = "l", col = "navy")
lines(density(fruitfly[,2]))
colorRampPalette("blue","red")[100]
colorRampPalette(c("blue","red"))[100]
colorRampPalette("red")[100]
colorRampPalette("red")
colorRampPalette(1000)
colorRamp("red","blue")
color.map <- colorRampPalette(c("blue", "red", "green"))(40)
plot(density(fruitfly[,1]), type = "l", col = "navy")
for(i in 2:ncol(fruitfly)) lines(density(fruitfly[,i]), col = color.map[i])
color.map <- colorRampPalette(c("blue", "red", "green"))(36)
plot(density(fruitfly[,1]), type = "l", col = color.map[1], ylim = c(0,0.3))
for(i in 2:ncol(fruitfly)) lines(density(fruitfly[,i]), col = color.map[i])
color.map <- colorRampPalette(c("blue", "red", "green"))(36)
plot(density(fruitfly[,1]), type = "l", col = color.map[1], ylim = c(0,0.25))
for(i in 2:ncol(fruitfly)) lines(density(fruitfly[,i]), col = color.map[i])
color.map <- colorRampPalette(c("blue", "red", "green"))(36)
plot(density(fruitfly[,1]), type = "l", col = color.map[1], ylim = c(0,0.25),
main = "Distribution of expression ratios", xlab = "log2 expression")
for(i in 2:ncol(fruitfly)) lines(density(fruitfly[,i]), col = color.map[i])
size <- rep(3,2000) # we have 3 replicates each have 2000 data points (i.e: genes)
# times will be set to 12 (the number of time points for each replicate)
out1 <- mb.long(fruitfly, times = 12, reps = size)
library(timecourse)
size <- rep(3,2000) # we have 3 replicates each have 2000 data points (i.e: genes)
# times will be set to 12 (the number of time points for each replicate)
out1 <- mb.long(fruitfly, times = 12, reps = size)
size <- rep(3,2000) # we have 3 replicates each have 2000 data points (i.e: genes)
# times will be set to 12 (the number of time points for each replicate)
out1 <- mb.long(fruitfly, times = 12, reps = size)
plotProfile(out1)
plotProfile(out1)[2]
plotProfile(out1, type = "b")
plotProfile(out1, type = "l")
plotProfile(out1, type = "l",ranking = 200)
library(limma)
topTable(out1)
out1$M
head(out1$M)
out1$rep.group
out1$con.group
out1$Lambda1
out1$percent
out1$prop
out1$HotellingT2
out1$HotellingT2
# Chunk 1: setup
knitr::opts_chunk$set(echo =TRUE, include = TRUE, message = FALSE,warning = FALSE,fig.align='center',fig.width=5,fig.height=4)
# Chunk 2
library(timecourse)
data("fruitfly")
head(fruitfly)
# Chunk 3
color.map <- colorRampPalette(c("blue", "red", "green"))(36)
plot(density(fruitfly[,1]), type = "l", col = color.map[1], ylim = c(0,0.25),
main = "Distribution of expression ratios", xlab = "log2 expression")
for(i in 2:ncol(fruitfly)) lines(density(fruitfly[,i]), col = color.map[i])
# Chunk 4
colnames(fruitfly)
size <- rep(3,2000) # we have 3 replicates each have 2000 data points (i.e: genes)
# times will be set to 12 (the number of time points for each replicate)
out1 <- mb.long(fruitfly, times = 12, reps = size)
size <- rep(3,2000) # we have 3 replicates each have 2000 data points (i.e: genes)
# times will be set to 12 (the number of time points for each replicate)
out1 <- mb.long(fruitfly, times = 12, reps = size)
plotProfile(out1)
data.mat <- readRDS("C:/Users/ozan/Desktop/Ozan_R_utilities/Development/longitudinal-analysis-tutorial/log_expression.rds")
head(data.mat)
View(data.mat)
data.mat <- readRDS("C:/Users/ozan/Desktop/Ozan_R_utilities/Development/longitudinal-analysis-tutorial/log_expression.rds")
data.mat <- data.mat[,1:12]
for (i in 1:12){
colnames(data.mat)[i] <- paste0("Experiment.",i)
}
saveRDS(data.mat,"C:/Users/ozan/Desktop/Ozan_R_utilities/Development/longitudinal-analysis-tutorial/log_expression.rds")
View(data.mat)
setwd("C:/Users/ozan/Desktop/Ozan_R_utilities/Development/longitudinal-analysis-tutorial")
data.mat <- readRDS("log_expression.rds")
data.mat <- readRDS("log_expression.rds")
head(data.mat)
annotations <- read.csv("annotations.csv", stringsAsFactors = TRUE)
annotations
